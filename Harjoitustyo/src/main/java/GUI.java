/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kone1
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.WindowEvent;
import java.awt.print.PrinterException;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import java.nio.file.*;import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import javax.swing.text.StyledDocument;
import javax.swing.text.rtf.RTFEditorKit;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

public class GUI extends javax.swing.JFrame {
    //uusi undomanager kumoamista ja toistamista varten
    UndoManager undo = new UndoManager();
    /**
     * Creates new form GUI
     */
    public GUI(String tunnus) {
        initComponents();
        //asetetaan nimi
        this.setTitle("Harjoitustyö");
        //asetetaan avautumaan ruudun keskelle
        this.setLocationRelativeTo(null);
        //asetetaan oletus fontti ja koko
        jtxtTeksti.setFont(new Font("Arial",Font.PLAIN,32));
        //uusi ikkunan sulkemistapahtuma eli mitä tapahtuu x:stä. Käytetään lopetus metodia
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(WindowEvent winEvt) {
                lopetus();
                System.exit(0); 
            }
        });
        //Tehdään doc niminen dokumentti ja sitten kuuntelija kumoamista ja toistamista varten
        Document doc = jtxtTeksti.getDocument();
        doc.addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent evt) {
                undo.addEdit(evt.getEdit());
            }
        });
        //haetaan fontit järjestelmästä
        GraphicsEnvironment gEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontNames = gEnv.getAvailableFontFamilyNames();
        //asetetaan fontit comboboxiin
        ComboBoxModel model = new DefaultComboBoxModel(fontNames);
        jcboFontti.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jButton1 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jbtnVari = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jcboFontti = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jcboKoko = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxtTeksti = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmnuTiedosto = new javax.swing.JMenu();
        jmnuUusi = new javax.swing.JMenuItem();
        jmnuAvaa = new javax.swing.JMenuItem();
        jmnuTallenna = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmnuTulosta = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmnuLopeta = new javax.swing.JMenuItem();
        jmnuMuokkaa = new javax.swing.JMenu();
        jmnuKumoa = new javax.swing.JMenuItem();
        jmnuToista = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmnuLeikkaa = new javax.swing.JMenuItem();
        jmnuKopioi = new javax.swing.JMenuItem();
        jmnuLiitä = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmnuKaikki = new javax.swing.JMenuItem();
        jmnuTietoja = new javax.swing.JMenu();
        jmnuAbout = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem4.setText("jMenuItem4");

        jMenuItem5.setText("jMenuItem5");

        jMenu1.setText("jMenu1");

        jMenuItem6.setText("jMenuItem6");

        jMenuItem7.setText("jMenuItem7");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jbtnVari.setText("Väri");
        jbtnVari.setFocusable(false);
        jbtnVari.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnVari.setPreferredSize(new java.awt.Dimension(50, 21));
        jbtnVari.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtnVari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnVariActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtnVari);

        jLabel2.setText("Fontti:");
        jToolBar1.add(jLabel2);

        jcboFontti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcboFonttiActionPerformed(evt);
            }
        });
        jToolBar1.add(jcboFontti);

        jLabel1.setText("Koko:");
        jToolBar1.add(jLabel1);

        jcboKoko.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "12", "16", "20", "24", "28", "32", "36", "40", "44", "48", "52", " " }));
        jcboKoko.setPreferredSize(new java.awt.Dimension(50, 22));
        jcboKoko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcboKokoActionPerformed(evt);
            }
        });
        jToolBar1.add(jcboKoko);

        jScrollPane2.setViewportView(jtxtTeksti);

        jmnuTiedosto.setText("Tiedosto");

        jmnuUusi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuUusi.setText("Uusi");
        jmnuUusi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuUusiActionPerformed(evt);
            }
        });
        jmnuTiedosto.add(jmnuUusi);

        jmnuAvaa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuAvaa.setText("Avaa");
        jmnuAvaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuAvaaActionPerformed(evt);
            }
        });
        jmnuTiedosto.add(jmnuAvaa);

        jmnuTallenna.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuTallenna.setText("Tallenna");
        jmnuTallenna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuTallennaActionPerformed(evt);
            }
        });
        jmnuTiedosto.add(jmnuTallenna);
        jmnuTiedosto.add(jSeparator3);

        jmnuTulosta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuTulosta.setText("Tulosta");
        jmnuTulosta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuTulostaActionPerformed(evt);
            }
        });
        jmnuTiedosto.add(jmnuTulosta);
        jmnuTiedosto.add(jSeparator1);

        jmnuLopeta.setText("Lopeta");
        jmnuLopeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuLopetaActionPerformed(evt);
            }
        });
        jmnuTiedosto.add(jmnuLopeta);

        jMenuBar1.add(jmnuTiedosto);

        jmnuMuokkaa.setText("Muokkaa");

        jmnuKumoa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuKumoa.setText("Kumoa");
        jmnuKumoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuKumoaActionPerformed(evt);
            }
        });
        jmnuMuokkaa.add(jmnuKumoa);

        jmnuToista.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuToista.setText("Toista");
        jmnuToista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuToistaActionPerformed(evt);
            }
        });
        jmnuMuokkaa.add(jmnuToista);
        jmnuMuokkaa.add(jSeparator2);

        jmnuLeikkaa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuLeikkaa.setText("Leikkaa");
        jmnuLeikkaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuLeikkaaActionPerformed(evt);
            }
        });
        jmnuMuokkaa.add(jmnuLeikkaa);

        jmnuKopioi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuKopioi.setText("Kopioi");
        jmnuKopioi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuKopioiActionPerformed(evt);
            }
        });
        jmnuMuokkaa.add(jmnuKopioi);

        jmnuLiitä.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuLiitä.setText("Liitä");
        jmnuLiitä.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuLiitäActionPerformed(evt);
            }
        });
        jmnuMuokkaa.add(jmnuLiitä);
        jmnuMuokkaa.add(jSeparator4);

        jmnuKaikki.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmnuKaikki.setText("Valitse kaikki");
        jmnuKaikki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuKaikkiActionPerformed(evt);
            }
        });
        jmnuMuokkaa.add(jmnuKaikki);

        jMenuBar1.add(jmnuMuokkaa);

        jmnuTietoja.setText("Tietoja");

        jmnuAbout.setText("Tietoja");
        jmnuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuAboutActionPerformed(evt);
            }
        });
        jmnuTietoja.add(jmnuAbout);

        jMenuBar1.add(jmnuTietoja);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmnuAvaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuAvaaActionPerformed
        // Avaa-valikon ohjelmointi, jos tekstikenttä ei ole tyhjä kysyy tallentamisesta. käyttää tehtyjä metodeja
        String teksti = jtxtTeksti.getText();
        if (teksti.isEmpty()) {
            avaus();
        }else {
            //Vaihdetaan Yes=Kyllä No=Ei
            UIManager.put("OptionPane.yesButtonText","Kyllä");
            UIManager.put("OptionPane.noButtonText","Ei");
            //avaa huomautus ikkunen tallennuksesta ja mitä tehdään vastauksesta riippuen
            int kysy = JOptionPane.showConfirmDialog(null, "Haluatko ensin tallentaa?" , "Tallennus", JOptionPane.YES_NO_OPTION);
            if (kysy == JOptionPane.YES_OPTION) {
                tallennus();
                jtxtTeksti.setText("");
                avaus();
            } else {
                jtxtTeksti.setText("");
                avaus();
            }
        }      
        
    }//GEN-LAST:event_jmnuAvaaActionPerformed
    //Avaus metodi
    private void avaus() {
        JFileChooser file = new JFileChooser();
        //filtteri näytettäville tiedostomuodoille
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".rtf","rtf");
        file.setFileFilter(filter);
        
        String fileName = "";
        // näyttää tiedoston avaus ikkunan
        if (file.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = file.getSelectedFile().getAbsolutePath();
        } else {
            return;
        }
        // käytetään richtext formaattia
        RTFEditorKit rtf = new RTFEditorKit();
        try {
            // ladataan tiedosto jtxtTekstille
            FileInputStream fi = new FileInputStream(fileName);
            rtf.read(fi, jtxtTeksti.getDocument(), 0);
            fi.close();
        } catch (Exception e) {
            System.out.println("err:" + e.toString());
        }   
    }
    private void jmnuTallennaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuTallennaActionPerformed
        // kutsutaan tallennus metodia
        tallennus();
    }//GEN-LAST:event_jmnuTallennaActionPerformed
    //Tallennus metodi voidaan käyttää monessa paikassa
    private void tallennus() {
        JFileChooser file = new JFileChooser();
        //filtteri näytettäville tiedostomuodoille
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".rtf","rtf");
        file.setFileFilter(filter);
         
        String fileName = "";
        //näyttää tiedoston avaus ikkunan
        if (file.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = file.getSelectedFile().getAbsolutePath();
            
            StyledDocument doc = (StyledDocument) jtxtTeksti.getDocument();
            //muutetaan richtext formattiin
            RTFEditorKit kit = new RTFEditorKit();
            BufferedOutputStream out;
            try {
                out = new BufferedOutputStream(new FileOutputStream(fileName));
                // Tallennetaan tiedosto
                kit.write(out, doc, doc.getStartPosition().getOffset(), doc.getLength());
                out.flush();
                out.close();
            } catch (Exception e) {
                System.out.println("Err:" + e.toString());
            }

        } else {
            return;
        }
    }
    private void jmnuKopioiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuKopioiActionPerformed
        // kopiointi
        //jtxtTeksti.copy();
        //kopionti clipBoardia avuksi käyttäen
        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
        StringSelection stringSelection = new StringSelection (jtxtTeksti.getSelectedText());
        clpbrd.setContents (stringSelection, null);
    }//GEN-LAST:event_jmnuKopioiActionPerformed

    private void jmnuLiitäActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuLiitäActionPerformed
        // liittäminen
        jtxtTeksti.paste();
        //aiempi tapa tuota insert:iä valittaa mutta toimi näin textAreassa
        //jtxtTeksti.insert(getClipboardString(), jtxtTeksti.getCaretPosition());
    }//GEN-LAST:event_jmnuLiitäActionPerformed
    // Lisäsin tähän metodin jolla liitä toimi textAreassa mutta ei enää textPanessa
    /*public String getClipboardString() {
        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
        String result = "";          
        Transferable contents = clpbrd.getContents(null);
        boolean hasTransferableText = (contents != null) && contents.isDataFlavorSupported(DataFlavor.stringFlavor);
        if ( hasTransferableText ) {
          try {
            result = (String)contents.getTransferData(DataFlavor.stringFlavor);
          }
          catch (UnsupportedFlavorException ex){
            System.out.println(ex);
            ex.printStackTrace();
          }
          catch (IOException ex) {
            System.out.println(ex);
            ex.printStackTrace();
          }        
        }
     return result;
    }*/
    private void jmnuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuAboutActionPerformed
        // Avaa uuden ikkunan Tietoa
        Tietoa about = new Tietoa();
        about.setVisible(true);
    }//GEN-LAST:event_jmnuAboutActionPerformed

    private void jmnuUusiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuUusiActionPerformed
        // Tyhjennetään tekstikenttä uudeksi ja jos se ei ole valmiiksi tyhjä kysytään tallennuksesta
        String teksti = jtxtTeksti.getText();
        if (teksti.isEmpty()) {
            jtxtTeksti.setText("");
            jtxtTeksti.setFont(new Font("Arial",Font.PLAIN,40));
        } else {
            //kieli muunnos
            UIManager.put("OptionPane.yesButtonText","Kyllä");
            UIManager.put("OptionPane.noButtonText","Ei");
            //avaa huomautus ikkunen tallennuksesta ja mitä tehdään vastauksesta riippuen
            int kysy = JOptionPane.showConfirmDialog(null, "Haluatko ensin tallentaa?" , "Tallennus", JOptionPane.YES_NO_OPTION);
            if (kysy == JOptionPane.YES_OPTION) {
                tallennus();
                jtxtTeksti.setText("");
            }else {
                jtxtTeksti.setText("");
            }
        }
    }//GEN-LAST:event_jmnuUusiActionPerformed

    private void jmnuTulostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuTulostaActionPerformed
        // tulostus ikkuna
        try {
            jtxtTeksti.print();
        } catch (PrinterException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmnuTulostaActionPerformed

    private void jmnuLopetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuLopetaActionPerformed
        // lopetus metodin kutsuminen
        lopetus();
    }//GEN-LAST:event_jmnuLopetaActionPerformed
     //lopetus metodi pariin paikkaan ja taas jos tekstikenttä ei tyhjä kysytään tallennuksesta
    void lopetus() {
        String teksti = jtxtTeksti.getText();
        if (teksti.isEmpty()) {
           System.exit(0); 
        } else {
            //kielikäännös
            UIManager.put("OptionPane.yesButtonText","Kyllä");
            UIManager.put("OptionPane.noButtonText","Ei");
            //avaa huomautus ikkunen tallennuksesta ja mitä tehdään vastauksesta riippuen
            int kysy = JOptionPane.showConfirmDialog(null, "Haluatko ensin tallentaa?" , "Tallennus", JOptionPane.YES_NO_OPTION);
            if (kysy == JOptionPane.YES_OPTION) {
                tallennus();
                System.exit(0);
            } else {
                System.exit(0);
            }
        }
    }
    private void jmnuKumoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuKumoaActionPerformed
        // kumoaa edellisen merkin tai liitetyn tekstin jos voi
        try {
            if (undo.canUndo()) {
                undo.undo();
            }
        } catch (CannotUndoException e) {
        }
    }//GEN-LAST:event_jmnuKumoaActionPerformed

    private void jmnuToistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuToistaActionPerformed
        // toistaa kumotun merkin tai liitetyn tekstin jos voi
        try {
            if (undo.canRedo()) {
                undo.redo();
            }
        } catch (CannotRedoException e) {
        }
    }//GEN-LAST:event_jmnuToistaActionPerformed

    private void jbtnVariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnVariActionPerformed
        // avaa värin valitsemis ruudun
        Color color =JColorChooser.showDialog(null, "Valitse väri ", Color.BLACK);
        // asettaa tekstikentässä olevan tekstin valitun väriseksi, jos ei tekstiä ei tee mitään
        jtxtTeksti.setForeground(color);
        //kohdistin takaisin tekstiruutuun
        jtxtTeksti.requestFocus();
    }//GEN-LAST:event_jbtnVariActionPerformed

    private void jcboFonttiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcboFonttiActionPerformed
        // Haetaan fontti ja koko comboboxeista ja muutetaan teksti siis kerralla koko teksti jos sitä on
        jtxtTeksti.setFont(new Font(jcboFontti.getSelectedItem().toString(),Font.PLAIN, Integer.parseInt(jcboKoko.getSelectedItem().toString())));
        //kohdistin takaisin tekstiruutuun
        jtxtTeksti.requestFocus();
    }//GEN-LAST:event_jcboFonttiActionPerformed

    private void jcboKokoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcboKokoActionPerformed
         // haetaan koko comboboxista
        String getSize = jcboKoko.getSelectedItem().toString();
        Font f = jtxtTeksti.getFont();
        // asetetaan tekstille haettu koko
        jtxtTeksti.setFont(new Font(f.getFontName(),f.getStyle(), Integer.parseInt(getSize)));
        //kohdistin takaisin tekstiruutuun
        jtxtTeksti.requestFocus();
    }//GEN-LAST:event_jcboKokoActionPerformed

    private void jmnuLeikkaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuLeikkaaActionPerformed
        // leikkaa
        jtxtTeksti.cut();
    }//GEN-LAST:event_jmnuLeikkaaActionPerformed

    private void jmnuKaikkiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuKaikkiActionPerformed
        // valitse kaikki
        jtxtTeksti.selectAll();
    }//GEN-LAST:event_jmnuKaikkiActionPerformed
   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jbtnVari;
    private javax.swing.JComboBox<String> jcboFontti;
    private javax.swing.JComboBox<String> jcboKoko;
    private javax.swing.JMenuItem jmnuAbout;
    private javax.swing.JMenuItem jmnuAvaa;
    private javax.swing.JMenuItem jmnuKaikki;
    private javax.swing.JMenuItem jmnuKopioi;
    private javax.swing.JMenuItem jmnuKumoa;
    private javax.swing.JMenuItem jmnuLeikkaa;
    private javax.swing.JMenuItem jmnuLiitä;
    private javax.swing.JMenuItem jmnuLopeta;
    private javax.swing.JMenu jmnuMuokkaa;
    private javax.swing.JMenuItem jmnuTallenna;
    private javax.swing.JMenu jmnuTiedosto;
    private javax.swing.JMenu jmnuTietoja;
    private javax.swing.JMenuItem jmnuToista;
    private javax.swing.JMenuItem jmnuTulosta;
    private javax.swing.JMenuItem jmnuUusi;
    private javax.swing.JTextPane jtxtTeksti;
    // End of variables declaration//GEN-END:variables
}
